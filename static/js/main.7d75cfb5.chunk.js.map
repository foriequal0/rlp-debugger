{"version":3,"sources":["decoders.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","numberDecoder","hexDecoder","stringDecoder","timestampDecoder","bn_js__WEBPACK_IMPORTED_MODULE_0__","bn_js__WEBPACK_IMPORTED_MODULE_0___default","n","buffer","length","BN","toString","e","bytes","noControlChars","arguments","undefined","getTrailingByte","index","Error","result","i","byte1","cp","String","fromCodePoint","_","timestamp","reduce","accum","byte","Date","toISOString","App","_this","Object","_Users_sclee_workspace_www_rlp_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_sclee_workspace_www_rlp_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_sclee_workspace_www_rlp_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","handleTextChange","rlp","value","target","valid","decoded","RLP","trim","setState","mode","text","handleClickDecode","handleClickEncode","stock","state","body","disabled","label","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","id","onChange","onClick","ListOrItem","React","Component","_ref","Buffer","isBuffer","Item","Array","isArray","style","marginLeft","map","child","idx","key","props","_this2","handleSelectTypeChange","type","_i","_decoders","_ref4","_ref3","_Users_sclee_workspace_www_rlp_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","decoder","_this3","options","renderSelector","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d75cfb5.chunk.js","sourcesContent":["import BN from \"bn.js\";\n\nexport interface Decoder {\n  (buffer: Buffer): string | null;\n}\n\nexport function numberDecoder(buffer: Buffer): string | null {\n  if (buffer.length > 8) {\n    return null;\n  }\n  try {\n    const bn = new BN(buffer);\n    return bn.toString(10);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function hexDecoder(buffer: Buffer): string | null {\n  return \"0x\" + buffer.toString(\"hex\");\n}\n\nexport function stringDecoder(bytes: Buffer, noControlChars = true): string | null {\n  function getTrailingByte(index: number) {\n    if ((bytes[index] & 0xc0) !== 0x80) throw new Error(\"Invalid utf8 sequence\");\n    return bytes[index] & 0x3f;\n  }\n\n  try {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n      const byte1 = bytes[i];\n      let cp;\n      if (byte1 < 0x80) {\n        cp = byte1;\n      } else if ((byte1 & 0xe0) === 0xc0) {\n        const byte2 = getTrailingByte(++i);\n        cp = ((byte1 & 0x1f) << 6) | byte2;\n      } else if ((byte1 & 0xf0) === 0xe0) {\n        const byte2 = getTrailingByte(++i);\n        const byte3 = getTrailingByte(++i);\n        cp = ((byte1 & 0x0f) << 12) | (byte2 << 6) | byte3;\n      } else if ((byte1 & 0xf8) === 0xf0) {\n        const byte2 = getTrailingByte(++i);\n        const byte3 = getTrailingByte(++i);\n        const byte4 = getTrailingByte(++i);\n        cp = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      } else {\n        throw new Error(\"Invalid utf8 sequence\");\n      }\n\n      if (noControlChars === true) {\n        // https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n        const c0 = cp >= 0x0000 && cp <= 0x001f;\n        const whitespace = cp === 0x09 || cp === 0x0a || cp === 0x0d;\n        const c1 = cp >= 0x0080 && cp <= 0x009f;\n        if ((c0 && !whitespace) || c1) {\n          return null; // control characters\n        }\n      }\n      result += String.fromCodePoint(cp);\n    }\n\n    return result;\n  } catch (_) {\n    return null;\n  }\n}\n\nexport function timestampDecoder(buffer: Buffer): string | null {\n  if (buffer.length > 4) {\n    return null;\n  }\n  const timestamp = buffer.reduce((accum, byte) => (accum << 8) + byte);\n  return new Date(timestamp * 1000).toISOString();\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport * as RLP from \"rlp\";\nimport { Decoder, hexDecoder, numberDecoder, stringDecoder, timestampDecoder } from \"./decoders\";\n\ntype AppState = {\n  mode: \"encoded\" | \"decoded\";\n  text: string;\n  rlp: {\n    valid: boolean;\n    decoded: any;\n  };\n};\n\nclass App extends React.Component<{}, AppState> {\n  public constructor() {\n    super({});\n\n    const stock = \"0xc701c502c303c104\";\n    this.state = {\n      mode: \"encoded\",\n      text: stock,\n      rlp: {\n        valid: true,\n        decoded: RLP.decode(stock),\n      },\n    };\n  }\n\n  private handleTextChange = (e: any) => {\n    const { value }: { value: string } = e.target;\n    let rlp;\n    try {\n      rlp = {\n        valid: true,\n        decoded: RLP.decode(value.trim()),\n      };\n    } catch (_) {\n      rlp = {\n        valid: false,\n        decoded: null,\n      };\n    }\n\n    this.setState({\n      mode: \"encoded\",\n      text: value,\n      rlp,\n    });\n  };\n\n  private handleClickDecode = () => {\n    this.setState({ mode: \"decoded\" });\n  };\n\n  private handleClickEncode = () => {\n    this.setState({ mode: \"encoded\" });\n  };\n\n  public render() {\n    let body;\n    if (this.state.mode === \"encoded\") {\n      const disabled = !this.state.rlp.valid;\n      const label = disabled ? \"RLP error\" : \"Decode\";\n      body = (\n        <div className=\"App-body\">\n          <div>\n            <textarea id=\"encoded-text\" value={this.state.text} onChange={this.handleTextChange} />\n          </div>\n          <button\n            id=\"decode-btn\"\n            disabled={disabled}\n            className=\"decode\"\n            onClick={this.handleClickDecode}\n          >\n            {label}\n          </button>\n        </div>\n      );\n    } else if (this.state.mode === \"decoded\") {\n      body = (\n        <div className=\"App-body\">\n          <div>\n            <ListOrItem value={this.state.rlp.decoded} />\n          </div>\n          <button id=\"encode-btn\" className=\"encode\" onClick={this.handleClickEncode}>\n            Encode\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>RLP debugger</h1>\n        </header>\n        {body}\n      </div>\n    );\n  }\n}\n\nfunction ListOrItem({ value }: { value: any }) {\n  if (Buffer.isBuffer(value)) {\n    return <Item value={value} />;\n  } else if (Array.isArray(value)) {\n    return (\n      <div>\n        <div>[+] List({value.length})</div>\n        <div style={{ marginLeft: \"1rem\" }}>\n          {value.map((child, idx) => (\n            <ListOrItem key={idx} value={child} />\n          ))}\n        </div>\n      </div>\n    );\n  } else {\n    throw new Error(\"Invalid type\");\n  }\n}\n\ntype Type = \"number\" | \"hex\" | \"string\" | \"timestamp\";\n\ninterface ItemProps {\n  value: Buffer;\n}\n\ninterface ItemState {\n  type: Type;\n  decoded: { [key in Type]: string };\n}\n\nclass Item extends React.Component<ItemProps, ItemState> {\n  public constructor(props: ItemProps) {\n    super(props);\n    const decoders: [Type, Decoder][] = [\n      [\"hex\", hexDecoder],\n      [\"string\", stringDecoder],\n      [\"number\", numberDecoder],\n      [\"timestamp\", timestampDecoder],\n    ];\n\n    const decoded: { [key in Type]?: string | null } = {};\n    for (const [type, decoder] of decoders) {\n      let result = decoder(props.value);\n      decoded[type] = result;\n    }\n    this.state = {\n      type: \"hex\",\n      decoded: decoded as { [key in Type]: string },\n    };\n  }\n\n  private handleSelectTypeChange = (e: any) => {\n    const value: Type = e.target.value;\n    this.setState({\n      type: value,\n    });\n  };\n\n  private renderSelector() {\n    const types: Type[] = [\"hex\", \"string\", \"number\", \"timestamp\"];\n    const options = types.map((type, index) => (\n      <option key={index} value={type} disabled={this.state.decoded[type] === null}>\n        {type}\n      </option>\n    ));\n    return (\n      <select value={this.state.type} onChange={this.handleSelectTypeChange}>\n        {options}\n      </select>\n    );\n  }\n\n  public render() {\n    return (\n      <div>\n        <div>\n          {this.renderSelector()} {this.state.decoded[this.state.type]}\n        </div>\n        <div />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}